# Proteomics

## Data

* Homo: 15 samples
* Mouse: 14 orthotopic + 15 subcutaneous samples
* Drug: 5 group(None/G/GA/GF/GFA)


**Processed data:**

```{bash,eval=F}
## homo
/public/home/prj_pdac/drug/processed_data/homo # HPC
├── 20230110_pdacDrug_Homo_PRO_proteinInfo.rds
├── 20230116_pdacDrug_Homo_PRO_exp.rds
├── 20230116_pdacDrug_Homo_PRO_meta.rds

# Drug
  Drug n
1    G 3
2   GA 3
3   GF 3
4  GFA 3
5 None 3

## mouse
/public/home/prj_pdac/drug/processed_data/mouse # HPC
├── 20230110_pdacDrug_Mouse_PRO_proteinInfo.rds
├── 20230116_pdacDrug_Mouse_PRO_exp.rds
├── 20230116_pdacDrug_Mouse_PRO_meta.rds

# Source, Drug
         Source Drug n
1    orthotopic    G 2
2    orthotopic   GA 3
3    orthotopic   GF 3
4    orthotopic  GFA 3
5    orthotopic None 3
6  subcutaneous    G 3
7  subcutaneous   GA 3
8  subcutaneous   GF 3
9  subcutaneous  GFA 3
10 subcutaneous None 3
```



### homo

#### Step1: Quick PCA of raw MS data
* Check the consistence of QC samples(mixer). 
* Delete protein with NaN, and run PCA. 

```{r,eval=FALSE}
library(openxlsx)
library(tidyverse)
library(gmodels)
library(ggpubr)
library(ggthemes)
dir.create("./results/chapter2_PRO/homo",recursive = T)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
homo <- read.xlsx("./data/20221229_135551_PDAC2022_homo_SP17_Report_protein.xlsx")
meta <- read.xlsx("./data/Meta-homo-JLX-GCX.xlsx")
#----------------------------------------------------------------------------------
#  Step 2: rm NAN row
#----------------------------------------------------------------------------------
dim(homo)
pro <- homo[,-c(1:7)]
pro <- mapply( pro ,FUN = as.numeric) # 6829  * 19
rownames(pro) <- homo$PG.ProteinGroups
# rm NAN row
pro <- na.omit(pro)  # 5962  * 19
# raw data
#pro <-  2^pro 
# colnames
identical(colnames(pro),meta$RawDataName %>% str_replace_all(" ","."))
colnames(pro) <- meta$Name
#----------------------------------------------------------------------------------
#  Step 3: PCA
#----------------------------------------------------------------------------------
pca.info <- fast.prcomp(t(pro)) # ,center = T,scale = TRUE
pca.data <- data.frame(sample = rownames(pca.info$x),
                       Type = meta$Source,
                       pca.info$x)
p <- ggscatter(pca.data, x = "PC1", y = "PC2",
              color = "Type",
              ellipse = TRUE,
              size = 2, 
              main = "proteomics-homo") + theme_base() +
              theme(plot.background = element_blank())
ggsave("./results/chapter2_PRO/homo/1.homo-PCA.png",p,width = 6,height = 5)
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/1.homo-PCA.png")
```



```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Boxplot
#----------------------------------------------------------------------------------
pdf(paste0("./results/chapter2_PRO/homo/2.homo-box.pdf"),width = 4, height = 4)
par(las=2,cex.axis=0.5)
boxplot(pro)
dev.off()
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/2.homo-box.png")
```

#### Step2: Data Normalization

* Aim:  proteomics normalization follow SOP
* Date: 2023-1-10, 2023-5-22更新
* SOP: remove protein rows without Gene Symbol and QC samples -> obtain raw data (2^n) -> change value<=10 to NA -> median normalize -> log2 -> rm protein with >80% NA -> KNN impute 

```{r,eval=FALSE}
library(impute)
dir.create("./results/chapter2_PRO/homo/data",recursive = T)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
raw <- read.xlsx("./data/20221229_135551_PDAC2022_homo_SP17_Report_protein.xlsx") # 6829 protein 
cli <- read.xlsx("./data/Meta-homo-JLX-GCX.xlsx") # 19 samples
#----------------------------------------------------------------------------------
#  Step 2: extract data from raw
#----------------------------------------------------------------------------------
## rm protein rows without Gene Symbol
exp <- raw %>% filter(!is.na(PG.Genes)) # 6828 protein 
## protein.info
pro.info <- exp[,1:7] 
pro.info <- pro.info %>% mutate(Symbol=str_split_i(PG.Genes,";",1)) # use first symbol 
saveRDS(pro.info,"./results/chapter2_PRO/homo/data/20230110_pdacDrug_Homo_PRO_proteinInfo.rds") # protein uniprot id, Symbol, Go term
write.xlsx(pro.info,"./results/chapter2_PRO/homo/data/20230110_pdacDrug_Homo_PRO_proteinInfo.xlsx",overwrite = T,colNames = T , rowNames = F)
## obtain raw data (2^n)
exp <- exp[,-c(1:7)]
exp <- mapply( exp ,FUN = as.numeric) # character ->  numeric
rownames(exp) <- pro.info$Symbol
exp <-  2^exp 
# colnames
identical(colnames(exp),str_replace_all(cli$RawDataName," ",".")) 
cli <- cli %>% mutate(Name=str_c("PRO_",Name))
colnames(exp) <- cli$Name
## rm QC
exp <- exp[,-c(16:19)] # 6828 protein * 15 samples
meta <- cli[-c(16:19),] # 15 samples
rownames(meta) <- meta$Name
identical(rownames(meta),colnames(exp))
#----------------------------------------------------------------------------------
#  Step 3: change value<=10 to NA , median normalize , log2
#----------------------------------------------------------------------------------
## convert value <= 10 to NA
exp[exp<=10] = NA  
## convert NaN to NA
exp[is.nan(exp)] = NA
## Median Normalization
data <- exp
col_median <- apply(data, 2, FUN=median, na.rm = TRUE)
ls_vec <- lapply(1:nrow(data), function(i){ x <- data[i,] / col_median })
data.nor <- do.call(rbind, ls_vec)
## log2(x)
data.nor.log <- log2(data.nor)
rownames(data.nor.log) <-rownames(data)
exp <- data.nor.log
#----------------------------------------------------------------------------------
#  Step 4: rm protein with >80% NA
#----------------------------------------------------------------------------------
# NA percentage across samples
na.protein <-  rowSums(is.na(exp)) %>% enframe() %>% arrange(-value) %>%  
              mutate(NA_percent = value/ncol(exp)) 
# check density of missing percent
gghistogram(na.protein,x = "NA_percent",add_density = T,rug = T)
# remove proteins
pro.rm <- na.protein %>% filter(NA_percent>0.8) %>% pull(name) ## rm 48 proteins
rm.id <- which(rownames(exp) %in% pro.rm)
exp <- exp[-rm.id,] # 6780 protein left
#----------------------------------------------------------------------------------
#  Step 5: KNN 
#----------------------------------------------------------------------------------
exp.impute <- impute.knn(data=exp,k=10,maxp = 1000,rng.seed = 123)
exp <- exp.impute$data
identical(rownames(meta),colnames(exp))
## output
saveRDS(exp,"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_exp.rds") # 6780 pro * 15 samples
write.xlsx(as.data.frame(exp),"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_exp.xlsx",colNames=T,rowNames=T,overwrite = T)
saveRDS(meta,"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_meta.rds")
write.xlsx(as.data.frame(meta),"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_meta.xlsx",colNames=T,rowNames=T,overwrite = T)
```

**homo processed data: 6780 pro * 15 samples**

```{r,eval=FALSE}
"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_exp.rds" 
"./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_meta.rds"
```

#### Step3: QC after normalization

* check the data after normalization

```{r,eval=FALSE}
library(gmodels)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
exp <- readRDS("./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_exp.rds")
meta <- readRDS("./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_meta.rds")
#----------------------------------------------------------------------------------
#  Step 2: Boxplot
#----------------------------------------------------------------------------------
png(paste0("./results/chapter2_PRO/homo/3.homo-box-after-Norm.png"),width = 4, height = 4,res = 1200,units = "in")
par(las=2,cex.axis=0.5)
boxplot(exp, main = " homo proteomics")
dev.off()
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/3.homo-box-after-Norm.png")
```



```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 3: PCA
#----------------------------------------------------------------------------------
pca.info <- fast.prcomp(exp) 
pca.data <- data.frame(sample = rownames(pca.info$rotation),
                       Group = meta$Group,
                       Drug = meta$Drug,
                       pca.info$rotation)
p <- ggscatter(pca.data, x = "PC1", y = "PC2",
              color = "Group",
              shape = "Drug" , 
              ellipse = TRUE,
              size = 3, 
              main = "proteomics-homo") + theme_base() +
              theme(plot.background = element_blank())
ggsave("./results/chapter2_PRO/homo/4.homo-PCA-after-Norm.png",p,width = 7,height = 5)
```

```{r,  echo=FALSE , out.width = "600px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/4.homo-PCA-after-Norm.png")
```

```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Target gene
#----------------------------------------------------------------------------------
# plot data
pdata <- exp %>% as.data.frame() %>% rownames_to_column(var="Gene")  %>%
                 pivot_longer(!Gene, names_to = "ID" ,values_to = "PRO") %>% 
                 left_join(meta,by=c("ID"="Name")) %>% 
                 mutate(Group=factor(Group,
                        levels = c("PDX_CTRL","PDX_G","PDX_GA","PDX_GF","PDX_GFA")))
## SYK
g <- "SYK"
ggcompare <- list(c("PDX_CTRL","PDX_G"),
                  c("PDX_CTRL","PDX_GA"),
                  c("PDX_CTRL","PDX_GF"),
                  c("PDX_CTRL","PDX_GFA"),
                  c("PDX_G","PDX_GA"),
                  c("PDX_G","PDX_GF"),
                  c("PDX_G","PDX_GFA"))
p <- ggboxplot(pdata %>% filter(Gene==g),
               x="Group",y="PRO",color = "Group",
               add = "dotplot",add.params = list(color="black",size=0.5),
               title = paste0( g, " in Homo"),
               palette = get_palette("Set2",5)) +
               xlab("Group of patients") +
               ylab("Normalized value in Proteomics") +
     stat_compare_means(comparisons = ggcompare,method="wilcox.test") +
     theme(legend.position = "none")
ggsave(paste0("./results/chapter2_PRO/homo/5.homo-",g,"-boxplot.png")  ,p,width = 6,height = 6)
```


```{r,  echo=FALSE , out.width = "500px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/5.homo-SYK-boxplot.png")
```


```{r,eval=FALSE}
## ITGAV
g <- "ITGAV"
p <- ggboxplot(pdata %>% filter(Gene==g),
               x="Group",y="PRO",color = "Group",
               add = "dotplot",add.params = list(color="black",size=0.5),
               title = paste0( g, " in Homo"),
               palette = get_palette("Set2",5)) +
               xlab("Group of patients") +
               ylab("Normalized value in Proteomics") +
     stat_compare_means(comparisons = ggcompare,method="wilcox.test") +
     theme(legend.position = "none")
ggsave(paste0("./results/chapter2_PRO/homo/5.homo-",g,"-boxplot.png")  ,p,width = 6,height = 6)
```

```{r,  echo=FALSE , out.width = "500px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/5.homo-ITGAV-boxplot.png")
```

### mouse

#### Step1: Quick PCA of raw MS data
* Check the consistence of QC samples(mixer). 
* Delete protein with NaN, and run PCA. 

```{r,eval=FALSE}
library(openxlsx)
library(tidyverse)
library(gmodels)
library(ggpubr)
library(ggthemes)
dir.create("./results/chapter2_PRO/mouse",recursive = T)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
mouse <- read.xlsx("./data/20230105_152631_PDAC2022_mouse29QC_Report_protein.xlsx")
meta <- read.xlsx("./data/Meta-mouse-JLX-GCX.xlsx")
#----------------------------------------------------------------------------------
#  Step 2: rm NAN row
#----------------------------------------------------------------------------------
dim(mouse) 
pro <- mouse[,-c(1:7)]
pro <- mapply( pro ,FUN = as.numeric) # 8948 *  36
rownames(pro) <- mouse$PG.ProteinGroups
# rm NAN row
pro <- na.omit(pro)  # 3990  * 36
# raw data
#pro <-  2^pro 
# colnames
identical(colnames(pro),meta$RawDataName %>% str_replace_all(" ","."))
colnames(pro) <- meta$Name
#----------------------------------------------------------------------------------
#  Step 3: PCA
#----------------------------------------------------------------------------------
pca.info <- fast.prcomp(t(pro)) # ,center = T,scale = TRUE
pca.data <- data.frame(sample = rownames(pca.info$x),
                       Type = meta$Source,
                       pca.info$x)
p <- ggscatter(pca.data, x = "PC1", y = "PC2",
              color = "Type",
              ellipse = TRUE,
              size = 2, 
              main = "proteomics-mouse") + theme_base() +
              theme(plot.background = element_blank())
ggsave("./results/chapter2_PRO/mouse/1.mouse-PCA.png",p,width = 7,height = 5)
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/1.mouse-PCA.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Boxplot
#----------------------------------------------------------------------------------
pdf(paste0("./results/chapter2_PRO/mouse/2.mouse-box.pdf"),width = 4, height = 4)
par(las=2,cex.axis=0.5)
boxplot(pro)
dev.off()
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/2.mouse-box.png")
```


#### Step2: Data Normalization

* Aim:  proteomics normalization follow SOP
* Date: 2023-1-10, 2023-5-22更新
* SOP: remove protein rows without Gene Symbol and QC samples -> obtain raw data (2^n) -> change value<=10 to NA -> median normalize -> log2 -> rm protein with >80% NA -> KNN impute 

```{r,eval=FALSE}
library(impute)
dir.create("./results/chapter2_PRO/mouse/data")
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
raw <- read.xlsx("./data/20230105_152631_PDAC2022_mouse29QC_Report_protein.xlsx") # 8948 protein 
cli <- read.xlsx("./data/Meta-mouse-JLX-GCX.xlsx") # 36 samples
#----------------------------------------------------------------------------------
#  Step 2: extract data from raw
#----------------------------------------------------------------------------------
## rm protein rows without Gene Symbol
exp <- raw %>% filter(!is.na(PG.Genes)) # 8875 protein 
## protein.info
pro.info <- exp[,1:7] 
pro.info <- pro.info %>% mutate(Symbol=str_split_i(PG.Genes,";",1)) # use first symbol 
saveRDS(pro.info,"./results/chapter2_PRO/mouse/data/20230110_pdacDrug_Mouse_PRO_proteinInfo.rds") # protein uniprot id, Symbol, Go term
write.xlsx(pro.info,"./results/chapter2_PRO/mouse/data/20230110_pdacDrug_Mouse_PRO_proteinInfo.xlsx",overwrite = T,colNames = T , rowNames = F)
## obtain raw data (2^n)
exp <- exp[,-c(1:7)]
exp <- mapply( exp ,FUN = as.numeric) # character ->  numeric
rownames(exp) <- pro.info$Symbol
exp <-  2^exp 
# colnames
identical(colnames(exp),str_replace_all(cli$RawDataName," ",".")) 
cli <- cli %>% mutate(Name=str_c("PRO_",Name))
colnames(exp) <- cli$Name
## rm QC
exp <- exp[,-c(30:36)] # 8875 protein * 29 samples
meta <- cli[-c(30:36),] # 29 samples
rownames(meta) <- meta$Name
identical(rownames(meta),colnames(exp))
#----------------------------------------------------------------------------------
#  Step 3: change value<=10 to NA , median normalize , log2
#----------------------------------------------------------------------------------
## convert value <= 10 to NA
exp[exp<=10] = NA  
## convert NaN to NA
exp[is.nan(exp)] = NA
## Median Normalization
data <- exp
col_median <- apply(data, 2, FUN=median, na.rm = TRUE)
ls_vec <- lapply(1:nrow(data), function(i){ x <- data[i,] / col_median })
data.nor <- do.call(rbind, ls_vec)
## log2(x)
data.nor.log <- log2(data.nor)
rownames(data.nor.log) <-rownames(data)
exp <- data.nor.log
#----------------------------------------------------------------------------------
#  Step 4: rm protein with >80% NA
#----------------------------------------------------------------------------------
# NA percentage across samples
na.protein <-  rowSums(is.na(exp)) %>% enframe() %>% arrange(-value) %>%  
              mutate(NA_percent = value/ncol(exp)) 
# check density of missing percent
gghistogram(na.protein,x = "NA_percent",add_density = T,rug = T)
# remove proteins
pro.rm <- na.protein %>% filter(NA_percent>0.8) %>% pull(name) ## rm 299 proteins
rm.id <- which(rownames(exp) %in% pro.rm)
exp <- exp[-rm.id,] # 8489 protein left
#----------------------------------------------------------------------------------
#  Step 5: KNN 
#----------------------------------------------------------------------------------
exp.impute <- impute.knn(data=exp,k=10,maxp = 1000,rng.seed = 123)
exp <- exp.impute$data
identical(rownames(meta),colnames(exp))
## output
saveRDS(exp,"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_exp.rds") # 8489 pro * 29 samples
write.xlsx(as.data.frame(exp),"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_exp.xlsx",colNames=T,rowNames=T,overwrite = T)
saveRDS(meta,"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_meta.rds")
write.xlsx(as.data.frame(meta),"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_meta.xlsx",colNames=T,rowNames=T,overwrite = T)
```


**mm processed data: 8489 pro * 29 samples**
```{r,eval=FALSE}
"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_exp.rds" 
"./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_meta.rds"
```

#### Step3: QC after normalization

* check the data after normalization


```{r,eval=FALSE}
library(gmodels)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
exp <- readRDS("./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_exp.rds")
meta <- readRDS("./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_meta.rds")
#----------------------------------------------------------------------------------
#  Step 2: Boxplot
#----------------------------------------------------------------------------------
png(paste0("./results/chapter2_PRO/mouse/3.mouse-box-after-Norm.png"),width = 4, height = 4,res = 1200,units = "in")
par(las=2,cex.axis=0.5)
boxplot(exp, main = " mouse proteomics")
dev.off()
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/3.mouse-box-after-Norm.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 3: PCA
#----------------------------------------------------------------------------------
pca.info <- fast.prcomp(exp)
pca.data <- data.frame(sample = rownames(pca.info$rotation),
                       Group = meta$Group,
                       Drug = meta$Drug,
                       Source = meta$Source,
                       pca.info$rotation)
p <- ggscatter(pca.data, x = "PC1", y = "PC2",
              color = "Group",
              shape = "Drug" , 
              facet.by = "Source",
              ellipse = TRUE,
              size = 2, 
              main = "proteomics-mouse",) + theme_base() +
              theme(plot.background = element_blank())
ggsave("./results/chapter2_PRO/mouse/4.mouse-PCA-after-Norm.png",p,width = 10,height = 5)
```

```{r,  echo=FALSE , out.width = "600px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/4.mouse-PCA-after-Norm.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Target gene
#----------------------------------------------------------------------------------
# plot data
pdata <- exp %>% as.data.frame() %>% rownames_to_column(var="Gene")  %>%
                 pivot_longer(!Gene, names_to = "ID" ,values_to = "PRO") %>% 
                 left_join(meta,by=c("ID"="Name")) %>% 
                 mutate(Group=factor(Group,
                        levels = c("ortho_CTRL","ortho_G","ortho_GA","ortho_GF","ortho_GFA",
                                   "sub_CTRL","sub_G","sub_GA","sub_GF","sub_GFA")))
## SYK
g <- "Syk"
ggcompare <- list(c("ortho_CTRL","ortho_G"),
                  c("ortho_CTRL","ortho_GA"),
                  c("ortho_CTRL","ortho_GF"),
                  c("ortho_CTRL","ortho_GFA"),
                  c("sub_CTRL","sub_G"),
                  c("sub_CTRL","sub_GA"),
                  c("sub_CTRL","sub_GF"),
                  c("sub_CTRL","sub_GFA"))
p <- ggboxplot(pdata %>% filter(Gene==g),
               x="Group",y="PRO",color = "Source",shape="Source", #facet.by = "Source",
               add = "dotplot",add.params = list(color="black",size=0.5,shape="Source"),
               title = paste0( g, " in Mouse"),
               palette =get_palette("Set2",2)) +
               xlab("Group of patients") +
               ylab("Normalized value in Proteomics") +
     stat_compare_means(comparisons = ggcompare,method="wilcox.test") +
     theme(legend.position = "none")
ggsave(paste0("./results/chapter2_PRO/mouse/5.mouse-",g,"-boxplot.png")  ,p,width = 10,height = 6)
```


```{r,  echo=FALSE , out.width = "800px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/5.mouse-Syk-boxplot.png")
```

```{r,eval=FALSE}
## ITGAV
g <- "Itgav"
ggcompare <- list(c("ortho_CTRL","ortho_G"),
                  c("ortho_CTRL","ortho_GA"),
                  c("ortho_CTRL","ortho_GF"),
                  c("ortho_CTRL","ortho_GFA"),
                  c("sub_CTRL","sub_G"),
                  c("sub_CTRL","sub_GA"),
                  c("sub_CTRL","sub_GF"),
                  c("sub_CTRL","sub_GFA"))
p <- ggboxplot(pdata %>% filter(Gene==g),
               x="Group",y="PRO",color = "Source",shape="Source",
               add = "dotplot",add.params = list(color="black",size=0.5,shape="Source"),
               title = paste0( g, " in Mouse"),
               palette =get_palette("Set2",2)) +
               xlab("Group of patients") +
               ylab("Normalized value in Proteomics") +
     stat_compare_means(comparisons = ggcompare,method="wilcox.test") +
     theme(legend.position = "none")
ggsave(paste0("./results/chapter2_PRO/mouse/5.mouse-",g,"-boxplot.png")  ,p,width = 10,height = 6)
```


```{r,  echo=FALSE , out.width = "800px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/5.mouse-Itgav-boxplot.png")
```





## DEG

### homo

```{r,eval=FALSE}
library(limma)
library(XGR)
library(tidyverse)
library(openxlsx)
library(ggpubr)
library(ggthemes)
library(PIONE)
library(patchwork)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
exp <- readRDS("./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_exp.rds") # 6780 proteins * 15 samples
meta <- readRDS("./results/chapter2_PRO/homo/data/20230116_pdacDrug_Homo_PRO_meta.rds")
identical(colnames(exp),rownames(meta))
#----------------------------------------------------------------------------------
#  Step 2: limma
#----------------------------------------------------------------------------------
myCompare <-c("G_CTRL","GA_CTRL","GF_CTRL","GFA_CTRL","GA_G",
                 "GF_G","GFA_G","GF_GA","GFA_GA","GFA_GF")
## limma
meta$contrast <- as.factor(meta$Drug)
design    <- model.matrix(~ 0 + contrast , data = meta)
fit       <- lmFit(exp, design)
contrast  <- makeContrasts( G_CTRL = contrastG - contrastNone ,
                            GA_CTRL = contrastGA-contrastNone,
                            GF_CTRL = contrastGF - contrastNone,
                            GFA_CTRL = contrastGFA - contrastNone,
                            GA_G = contrastGA - contrastG ,
                            GF_G = contrastGF - contrastG ,
                            GFA_G = contrastGFA - contrastG,
                            GF_GA = contrastGF - contrastGA,
                            GFA_GA = contrastGFA - contrastGA,
                            GFA_GF = contrastGFA - contrastGF,
                            levels = design)
fits      <- contrasts.fit(fit, contrast)
ebFit     <- eBayes(fits)
## collect all limma result
limma_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
  limma.res <- topTable(ebFit, coef = x, adjust.method = 'fdr', number = Inf)
  # result
  limma.res <- limma.res %>% filter(!is.na(adj.P.Val)) %>%
    mutate( logP = -log10(P.Value) ) %>%
    mutate( group = "not sig") %>%
    mutate( tag = myCompare[x] ) %>%
    mutate( Gene = ID)
  # cutoff : p < 0.05
  limma.res$group[which( (limma.res$P.Value < 0.05) & (limma.res$logFC > 0) )] = "up"
  limma.res$group[which( (limma.res$P.Value < 0.05) & (limma.res$logFC < 0) )] = "down"
  dim(limma.res)
  print(table(limma.res$group) )
  # calculate average value for each group
  caseName <- paste0("PDX_",str_split_i(myCompare[x],"_",1))
  ctrlName <- paste0("PDX_",str_split_i(myCompare[x],"_",2))
  id_case <- which(meta$Group==caseName)
  id_control <- which(meta$Group==ctrlName)
  AVG_all <-  rowMeans(exp)
  AVG_case <- rowMeans(exp[,id_case])
  AVG_control <- rowMeans(exp[,id_control])
  AVG <- cbind(AVG_all,AVG_case,AVG_control)
  AVG <- AVG %>% as.data.frame() %>% mutate(Gene=rownames(AVG))
  limma.res <- limma.res %>% left_join(AVG,by=c("Gene"="Gene"))
  limma.res <- limma.res %>% dplyr::select(Gene,AVG_all,AVG_case,AVG_control,everything()) %>% 
                            mutate(cutoff="p<0.05")
})
names(limma_ls) <- myCompare
write.xlsx(limma_ls,"./results/chapter2_PRO/homo/6.limma_each_2_group.xlsx",overwrite = T,colNames=T)
saveRDS(limma_ls,"./results/chapter2_PRO/homo/6.limma_each_2_group.rds")
#----------------------------------------------------------------------------------
#  Step 3: volcano
#----------------------------------------------------------------------------------
volcano_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
  # plot data
  pdata <- limma_ls[[x]]
  pdata <- pdata %>% mutate(group=factor(group,levels = c("up","down","not sig")),
                            label=ifelse(group!="not sig",Gene,""))
  my_label <- paste0( "Cutoff:P<0.05 ; " ,
                      "Up:",table(pdata$group)[1]," ; " ,
                      "Down:" , table(pdata$group)[2])
  p <- ggscatter(pdata,
                 x = "logFC", y = "logP",
                 color = "group", size = 1,
                 main = paste0("hsa: ",myCompare[x]) ,
                 xlab = "log2FoldChange", ylab = "-log10(P.value)",
                 palette = c("#CC0000","#339900","#444444"),
                 #label = pdata$label,font.label = 3, repel = T
                 )+
    theme_base()+
    geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "#222222") +
    geom_vline(xintercept = 0 , linetype="dashed", color = "#222222") +
    labs(subtitle = my_label) + theme(plot.background = element_blank())
})
names(volcano_ls)<-myCompare
saveRDS(volcano_ls,"./results/chapter2_PRO/homo/7.volcano.rds")
# output
pdf("./results/chapter2_PRO/homo/7.volcano.pdf",width = 8,height = 8 )
volcano_ls
dev.off()
```


```{r,  echo=FALSE , out.width = "400px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/7.volcano.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Gene enrichment analysis: oSEAadv
#----------------------------------------------------------------------------------
placeholder <- "http://www.comptransmed.pro/bigdata_ctm"
## Gene sets : Gene ontology | KEGG
sets <- tibble(onto=c('GOBP','GOCC','GOMF',"KEGG")) %>%
  mutate(set=map(onto,~oRDS(str_c("org.Hs.eg",.x),placeholder=placeholder)))
## Significant Gene Set
# all significant gene set
limma_all_sig <- do.call(rbind,limma_ls) %>% filter(group != "not sig") %>% 
                    mutate(GS=paste0(tag,".",group))
sigGS <- split(x=limma_all_sig$Gene,f=limma_all_sig$GS)
## enrichment
enrich_ls <- pbapply::pblapply(1:length(sigGS),FUN=function(x){  
  # DE genes 
  deg_vec <- sigGS[x]
  # enrichment
  esad <- oSEAadv(deg_vec, sets, size.range=c(15,1500), test="fisher", min.overlap=3) 
  df_eTerm <- esad %>% oSEAextract() %>% 
  filter(adjp<5e-2, distance==3) %>%
  mutate(group=namespace) %>% group_by(group) %>% top_n(100,-adjp) %>%
  arrange(group,-adjp) %>% 
  mutate(Tag=names(sigGS[x]))
})
names(enrich_ls) <- names(sigGS)
# output
write.xlsx(enrich_ls,"./results/chapter2_PRO/homo/8.enrichment.xlsx",overwrite = T)
saveRDS(enrich_ls,"./results/chapter2_PRO/homo/8.enrich_ls.rds")
## enrichment plot
enrich_plot_ls <- pbapply::pblapply(1:length(sigGS),FUN=function(x){ 
  df_eTerm <- enrich_ls[[x]]
  if(df_eTerm %>% count(onto) %>% nrow() > 3){ #  has enrichment terms
  gp_go <- df_eTerm  %>% filter(onto%in% c('GOBP','GOCC','GOMF')) %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0( "GO pathway: ",names(enrich_ls[x])))
  gp_kegg <- df_eTerm %>% filter(onto%in% c('KEGG'))  %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0( "KEGG pathway: ",names(enrich_ls[x])))
  p <- gp_go + gp_kegg}
  else{p <- NULL}  # no enrichment terms
  return(p)
  })
saveRDS(enrich_plot_ls,"./results/chapter2_PRO/homo/8.enrich_plot_ls.rds")
# output
pdf("./results/chapter2_PRO/homo/8.enrichment.pdf",width = 12,height = 6)
enrich_plot_ls
dev.off()
```

```{r,  echo=FALSE , out.width = "800px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/8.enrichment.png")
```



```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 5: GSEA
#----------------------------------------------------------------------------------
library(clusterProfiler)
## Databases
gmt.kegg <- read.gmt("./data/databases/c2.cp.kegg.v7.4.symbols.gmt")
gmt.hallmark <- read.gmt("./data/databases/h.all.v7.4.symbols.gmt")
gmt.file <- rbind(gmt.kegg, gmt.hallmark)
## GSEA
gsea_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
    data <-  limma_ls[[x]] 
    foldChange <- data$logFC 
    names(foldChange) <- data$Gene
    foldChange <- foldChange[order(foldChange, decreasing = T)]
    edo.gsea <- GSEA(foldChange, TERM2GENE = gmt.file, 
                     pvalueCutoff = 1, nPerm = 1000)
    edo.gsea@result$Description <- tolower(edo.gsea@result$Description)
    edo.gsea
})
names(gsea_ls) <- myCompare
saveRDS(gsea_ls,"./results/chapter2_PRO/homo/9.GSEA.rds")
write.xlsx(gsea_ls,"./results/chapter2_PRO/homo/9.GSEA.xlsx",overwrite = T,colNames=T)
## vasualization
ridgeplot_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
          p <- ridgeplot(gsea_ls[[x]],  label_format = 100,fill="pvalue") + 
                labs(title = paste0("GSEA Ridgeplot in ",myCompare[x]))})
names(ridgeplot_ls) <- myCompare
saveRDS(ridgeplot_ls,"./results/chapter2_PRO/homo/9.GSEA_ridgePlot.rds")
# output
pdf("./results/chapter2_PRO/homo/9.GSEA_ridgePlot.pdf",width = 12,height = 10 )
ridgeplot_ls
dev.off()
```

```{r,  echo=FALSE , out.width = "600px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/9.GSEA_ridgePlot.png")
```


```{r,eval=FALSE,echo=FALSE}
#----------------------------------------------------------------------------------
#  Step 6: Gene enrichment comparison
#----------------------------------------------------------------------------------
library(patchwork)
## Significant Gene Set
# all significant gene set
limma_all_sig <- do.call(rbind,limma_ls) %>% filter(group != "not sig") %>% 
                    mutate(GS=paste0(tag,"_",group))
sigGS <- split(x=limma_all_sig$Gene,f=limma_all_sig$GS)
# up significant gene set
limma_all_up <-limma_all_sig %>% filter(group=="up") 
sigGS.up <- split(x=limma_all_up$Gene,f=limma_all_up$GS)
# down significant gene set
limma_all_down <-limma_all_sig %>% filter(group=="down") 
sigGS.down <- split(x=limma_all_down$Gene,f=limma_all_down$GS)

## Comparing enrichment results of multiple gene lists
# all
edox <- compareCluster(geneClusters = sigGS,
                      fun='enricher',
                      TERM2GENE = gmt.file,
                      pvalueCutoff = 0.1,
                      pAdjustMethod = "BH",
                      qvalueCutoff = 1)
unique(edox@compareClusterResult$Cluster)  %>% length()
edox@compareClusterResult$ID = tolower(edox@compareClusterResult$ID)
edox@compareClusterResult$Description = tolower(edox@compareClusterResult$Description)
write.xlsx(edox@compareClusterResult,"./results/chapter2_PRO/homo/10.Comparing_enrich_all.xlsx")
saveRDS(edox,"./results/chapter2_PRO/homo/10.Comparing_enrich_all.rds")
# up
edox.up <- compareCluster(geneClusters = sigGS.up,
                      fun='enricher',
                      TERM2GENE = gmt.file,
                      pvalueCutoff = 0.1,
                      pAdjustMethod = "BH",
                      qvalueCutoff = 1)
unique(edox.up@compareClusterResult$Cluster)  %>% length()
edox.up@compareClusterResult$ID = tolower(edox.up@compareClusterResult$ID)
edox.up@compareClusterResult$Description = tolower(edox.up@compareClusterResult$Description)
# down
edox.down <- compareCluster(geneClusters = sigGS.down,
                      fun='enricher',
                      TERM2GENE = gmt.file,
                      pvalueCutoff = 0.1,
                      pAdjustMethod = "BH",
                      qvalueCutoff = 1)
unique(edox.down@compareClusterResult$Cluster)  %>% length()
edox.down@compareClusterResult$ID = tolower(edox.down@compareClusterResult$ID)
edox.down@compareClusterResult$Description = tolower(edox.down@compareClusterResult$Description)
## Plot
p <- dotplot(edox, showCategory =  30 , label_format = 1000,
             includeAll=TRUE,font.size = 10,
             title = "Enrichment of up/down-regulated genes") +
             theme(axis.text.x=element_text(size=8))
ggsave("./results/chapter2_PRO/homo/10.Comparing_enrich_all.png",p,width = 18,height = 12)
p.up <- dotplot(edox.up, showCategory =  30 , label_format = 1000,
             includeAll=TRUE,font.size = 20,
             title = "Enrichment of up-regulated genes") +
             theme(axis.text.x=element_text(size=10))
p.down <- dotplot(edox.down, showCategory =  30 , label_format = 1000,
             includeAll=TRUE,font.size = 20,
             title = "Enrichment of down-regulated genes") +
             theme(axis.text.x=element_text(size=10))
p <- p.up + p.down  + plot_layout(guides = 'collect')
ggsave("./results/chapter2_PRO/homo/10.Comparing_enrich_up_down.png",p,width = 30,height = 10)
```



```{r,  echo=FALSE , out.width = "900px",fig.align = 'center',  fig.cap = '' }
# library(knitr)
# knitr::include_graphics("./results/chapter2_PRO/homo/10.Comparing_enrich_up_down.png")
```

```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 6: SupraHex: visualise DEPs and carry out gene clustering/sample correlation
#----------------------------------------------------------------------------------
library(supraHex)
# 1) generate train data :  row by deg and col by samples
sig_proteins <- limma_all_sig %>% pull(Gene) %>% unique() # 2664 prteins
data <- exp[sig_proteins,]
#          PRO_PDX_G_1 PRO_PDX_G_2  PRO_PDX_G_3 PRO_PDX_GA_1 PRO_PDX_GA_2
# MFSD5    -0.01634028  0.01991902  0.008410599  0.004396296  -0.01458781
# CXCL5    -0.94709592 -1.44203714 -1.389752783 -1.486710655  -0.97505334
# SLC25A46 -1.96046685 -2.08924562 -1.890746671 -2.272441267  -2.23024608
# LEMD3    -1.09226425 -1.82728696 -1.429552819 -1.335565490  -0.72534853
# IGKV4-1  -0.27611408  0.01902008  0.008327611  0.722514622  -0.05891975
# WASHC2A  -0.27663814  0.55392574  0.522619388  1.773142905   0.54489646
# 2) get trained using by default setup
sMap <- sPipeline(data=data)
pdf("./results/chapter2_PRO/homo/11.superHex.pdf", width = 6, height = 12)
visHexMulComp(sMap,  colormap="royalblue3-white-red2", newpage = F,rect.grid=c(5,3), zlim=c(-2,2),title.rotate = 15)
dev.off()
```

```{r,  echo=FALSE , out.width = "600px",fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/11.superHex.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 7: GSEA analysis (PIONE subnetwork gene sets)
#----------------------------------------------------------------------------------
library(clusterProfiler)
library(enrichplot)
# pione subnetwork 
subnet <- read.xlsx("./data/databases/3.PIONE_subg_nodes.xlsx") # 52 genes
pione_term <- data.frame(term="PIONE_subnet",gene=subnet$name)
# GSEA
gsea_pione_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
    data <-  limma_ls[[myCompare[x]]] 
    foldChange <- data$logFC 
    names(foldChange) <- data$Gene
    foldChange <- foldChange[order(foldChange, decreasing = T)]
    edo.gsea <- GSEA(foldChange, TERM2GENE = pione_term, 
                     pvalueCutoff = 1, nPerm = 1000)
    edo.gsea@result$Description <- tolower(edo.gsea@result$Description)
    color.set <- c("#5e4542","#b22613")
    p <- gseaplot2(edo.gsea, geneSetID="PIONE_subnet",
               rel_heights = c(0.8,0.2), pvalue_table = T, base_size = 16, 
               subplots=c(1,2), color = color.set,
               title =paste0 ("Protein comparison : ",myCompare[x])) })
names(gsea_pione_ls) <- myCompare
saveRDS(gsea_pione_ls,"./results/chapter2_PRO/homo/12.gsea_pione.rds")
# output
pdf("./results/chapter2_PRO/homo/12.gsea_pione.pdf",width = 10,height = 5)
gsea_pione_ls
dev.off()
```


```{r,  echo=FALSE , out.width = "600px",fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/homo/12.gsea_pione.png")
```

### mouse


```{r,eval=FALSE}
library(limma)
library(XGR)
library(tidyverse)
library(patchwork)
#----------------------------------------------------------------------------------
#  Step 1: Load the Data
#----------------------------------------------------------------------------------
exp <- readRDS("./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_exp.rds") # 8489 proteins * 29 samples
meta <- readRDS("./results/chapter2_PRO/mouse/data/20230116_pdacDrug_Mouse_PRO_meta.rds")
identical(colnames(exp),rownames(meta))
# compare
myCompare <-c("G_CTRL","GA_CTRL","GF_CTRL","GFA_CTRL","GA_G",
                 "GF_G","GFA_G","GF_GA","GFA_GA","GFA_GF")
#----------------------------------------------------------------------------------
#  Step 2: limma
#----------------------------------------------------------------------------------
limma_ls <- pbapply::pblapply(c("orthotopic","subcutaneous"),function(i){
  # data
  pdata <- meta %>% filter(Source==i)
  edata <- exp[,pdata$Name]
  # compare
  myCompare <-c("G_CTRL","GA_CTRL","GF_CTRL","GFA_CTRL","GA_G",
                 "GF_G","GFA_G","GF_GA","GFA_GA","GFA_GF")
  ## limma
  pdata$contrast <- as.factor(pdata$Drug)
  design    <- model.matrix(~ 0 + contrast , data = pdata)
  fit       <- lmFit(edata, design)
  contrast  <- makeContrasts( G_CTRL = contrastG - contrastNone ,
                              GA_CTRL = contrastGA-contrastNone,
                              GF_CTRL = contrastGF - contrastNone,
                              GFA_CTRL = contrastGFA - contrastNone,
                              GA_G = contrastGA - contrastG ,
                              GF_G = contrastGF - contrastG ,
                              GFA_G = contrastGFA - contrastG,
                              GF_GA = contrastGF - contrastGA,
                              GFA_GA = contrastGFA - contrastGA,
                              GFA_GF = contrastGFA - contrastGF,
                              levels = design)
  fits      <- contrasts.fit(fit, contrast)
  ebFit     <- eBayes(fits)
## collect all limma result
  res_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
    limma.res <- topTable(ebFit, coef = x, adjust.method = 'fdr', number = Inf)
    # result
    limma.res <- limma.res %>% filter(!is.na(adj.P.Val)) %>%
      mutate( logP = -log10(P.Value) ) %>%
      mutate( group = "not sig") %>%
      mutate( tag = myCompare[x] ) %>%
      mutate( Gene = ID) %>% 
      mutate( Source = i)
    # cutoff : p < 0.05
    limma.res$group[which( (limma.res$P.Value < 0.05) & (limma.res$logFC > 0) )] = "up"
    limma.res$group[which( (limma.res$P.Value < 0.05) & (limma.res$logFC < 0) )] = "down"
    dim(limma.res)
    print(table(limma.res$group) )
    # calculate average value for each group
    prefix <- ifelse(i=="orthotopic","ortho_","sub_")
    caseName <- paste0(prefix,str_split_i(myCompare[x],"_",1))
    ctrlName <- paste0(prefix,str_split_i(myCompare[x],"_",2))
    id_case <- which(meta$Group==caseName)
    id_control <- which(meta$Group==ctrlName)
    AVG_all <-  rowMeans(exp)
    AVG_case <- rowMeans(exp[,id_case])
    AVG_control <- rowMeans(exp[,id_control])
    AVG <- cbind(AVG_all,AVG_case,AVG_control)
    AVG <- AVG %>% as.data.frame() %>% mutate(Gene=rownames(AVG))
    limma.res <- limma.res %>% left_join(AVG,by=c("Gene"="Gene"))
    limma.res <- limma.res %>% dplyr::select(Gene,AVG_all,AVG_case,AVG_control,everything())
  })
names(res_ls) <- myCompare
write.xlsx(res_ls,paste0("./results/chapter2_PRO/mouse/","6.[",i,"]_limma_each_2_group.xlsx"),overwrite = T,colNames=T)
res_ls
})  
names(limma_ls) <-c("orthotopic","subcutaneous")
limma_ortho_ls <- limma_ls[["orthotopic"]]
limma_sub_ls <- limma_ls[["subcutaneous"]]
saveRDS(limma_ls,"./results/chapter2_PRO/mouse/6.limma.rds")
#----------------------------------------------------------------------------------
#  Step 3: volcano
#----------------------------------------------------------------------------------
volcano_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
  ## plot data in orthotopic
  pdata <- limma_ortho_ls[[x]]
  pdata <- pdata %>% mutate(group=factor(group,levels = c("up","down","not sig")),
                            label=ifelse(group!="not sig",Gene,""))
  my_label <- paste0( "Cutoff:P<0.05 ; " ,
                      "Up:",table(pdata$group)[1]," ; " ,
                      "Down:" , table(pdata$group)[2])
  p1 <- ggscatter(pdata,
                 x = "logFC", y = "logP",
                 color = "group", size = 1,
                 main =  paste0(myCompare[x] ," in orthotopic")  ,
                 xlab = "log2FoldChange", ylab = "-log10(P.value)",
                 palette = c("#CC0000","#339900","#444444"),
                 #label = pdata$label,font.label = 3, repel = T
                 )+
    theme_base()+
    geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "#222222") +
    geom_vline(xintercept = 0 , linetype="dashed", color = "#222222") +
    labs(subtitle = my_label) + theme(plot.background = element_blank())
  ## plot data in subcutaneous
  pdata <- limma_sub_ls[[x]]
  pdata <- pdata %>% mutate(group=factor(group,levels = c("up","down","not sig")),
                            label=ifelse(group!="not sig",Gene,""))
  my_label <- paste0( "Cutoff:P<0.05 ; " ,
                      "Up:",table(pdata$group)[1]," ; " ,
                      "Down:" , table(pdata$group)[2])
  p2 <- ggscatter(pdata,
                 x = "logFC", y = "logP",
                 color = "group", size = 1,
                 main =  paste0(myCompare[x] ," in subcutaneous")  ,
                 xlab = "log2FoldChange", ylab = "-log10(P.value)",
                 palette = c("#CC0000","#339900","#444444"),
                 #label = pdata$label,font.label = 3, repel = T
                 )+
    theme_base()+
    geom_hline(yintercept = -log10(0.05), linetype="dashed", color = "#222222") +
    geom_vline(xintercept = 0 , linetype="dashed", color = "#222222") +
    labs(subtitle = my_label) + theme(plot.background = element_blank())
    # p 
    p <- p1+p2
})
names(volcano_ls)<-myCompare
saveRDS(volcano_ls,"./results/chapter2_PRO/mouse/7.volcano.rds")
# output
pdf("./results/chapter2_PRO/mouse/7.volcano.pdf",width = 16,height = 8 )
volcano_ls
dev.off()
```



```{r,  echo=FALSE , out.width = "800px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/7.volcano.png")
```


```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 4: Gene enrichment analysis: oSEAadv
#----------------------------------------------------------------------------------
placeholder <- "http://www.comptransmed.pro/bigdata_ctm"
## Gene sets : Gene ontology | KEGG
sets <- tibble(onto=c('GOBP','GOCC','GOMF',"KEGG")) %>%
  mutate(set=map(onto,~oRDS(str_c("org.Mm.eg",.x),placeholder=placeholder)))
## enrichment
# (1) orthotopic
enrich_ortho_ls <- pbapply::pblapply(1:20,FUN=function(x){  
  ## Significant Gene Set
  # all significant gene set
  limma_all_sig <- do.call(rbind,limma_ortho_ls) %>% filter(group != "not sig") %>% 
                        mutate(GS=paste0(tag,".",group))
  sigGS <- split(x=limma_all_sig$Gene,f=limma_all_sig$GS)
  # DE genes 
  deg_vec <- sigGS[x]
  # enrichment
  esad <- oSEAadv(deg_vec, sets, size.range=c(15,1500), test="fisher", min.overlap=3) 
  df_eTerm <- esad %>% oSEAextract() %>% 
  filter(adjp<5e-2, distance==3) %>%
  mutate(group=namespace) %>% group_by(group) %>% top_n(100,-adjp) %>%
  arrange(group,-adjp) %>% 
  mutate(Tag=names(sigGS[x]),Source="orthotopic")
})
names(enrich_ortho_ls) <- names(sigGS)
write.xlsx(enrich_ortho_ls,"./results/chapter2_PRO/mouse/8.[orthotopic].enrichment.xlsx",overwrite = T,colNames=T)
saveRDS(enrich_ortho_ls,"./results/chapter2_PRO/mouse/8.[orthotopic].enrichment.rds")

# (2) sub
enrich_sub_ls <- pbapply::pblapply(1:20,FUN=function(x){  
  ## Significant Gene Set
  # all significant gene set
  limma_all_sig <- do.call(rbind,limma_sub_ls) %>% filter(group != "not sig") %>% 
                        mutate(GS=paste0(tag,".",group))
  sigGS <- split(x=limma_all_sig$Gene,f=limma_all_sig$GS)
  # DE genes 
  deg_vec <- sigGS[x]
  # enrichment
  esad <- oSEAadv(deg_vec, sets, size.range=c(15,1500), test="fisher", min.overlap=3) 
  df_eTerm <- esad %>% oSEAextract() %>% 
  filter(adjp<5e-2, distance==3) %>%
  mutate(group=namespace) %>% group_by(group) %>% top_n(100,-adjp) %>%
  arrange(group,-adjp) %>% 
  mutate(Tag=names(sigGS[x]),Source="subcutaneous")
})
names(enrich_sub_ls) <- names(sigGS)
write.xlsx(enrich_sub_ls,"./results/chapter2_PRO/mouse/8.[subcutaneous].enrichment.xlsx",overwrite = T,colNames=T)
saveRDS(enrich_sub_ls,"./results/chapter2_PRO/mouse/8.[subcutaneous].enrichment.rds")

## enrichment plot
enrich_plot_ls <- pbapply::pblapply(1:length(sigGS),FUN=function(x){ 
  df_eTerm_ortho <- enrich_ortho_ls[[x]]
  df_eTerm_sub <- enrich_sub_ls[[x]]
  if((df_eTerm_ortho %>% count(onto) %>% nrow() > 3) & (df_eTerm_sub %>% count(onto) %>% nrow() > 3) ){ #  has enrichment terms
    # (1) orthotopic
  gp_go_ortho <- df_eTerm_ortho  %>% filter(onto%in% c('GOBP','GOCC','GOMF')) %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0("[orthotopic] " ,"GO pathway: ",names(enrich_ortho_ls[x])))
  gp_kegg_ortho <- df_eTerm_ortho %>% filter(onto%in% c('KEGG'))  %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0("[orthotopic] " , "KEGG pathway: ",names(enrich_ortho_ls[x])))
   # (2) subcutaneous
    gp_go_sub <- df_eTerm_sub  %>% filter(onto%in% c('GOBP','GOCC','GOMF')) %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0("[subcutaneous] " ,"GO pathway: ",names(enrich_sub_ls[x])))
    gp_kegg_sub <- df_eTerm_sub %>% filter(onto%in% c('KEGG'))  %>% 
    oSEAballoon(top=100, adjp.cutoff=0.05, shape=19, colormap="grey90-orange-darkred") +
    labs(title = paste0("[subcutaneous] " , "KEGG pathway: ",names(enrich_sub_ls[x])))
    p <- (gp_go_ortho + gp_kegg_ortho) / (gp_go_sub + gp_kegg_sub)
  }
  else{p <- NULL}  # no enrichment terms
  return(p)
  })
saveRDS(enrich_plot_ls,"./results/chapter2_PRO/mouse/8.enrich_plot_ls.rds")
# output
pdf("./results/chapter2_PRO/mouse/8.enrichment.pdf",width = 12,height = 10)
enrich_plot_ls
dev.off()
```


```{r,  echo=FALSE , out.width = "800px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/8.enrichment.png")
```

```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 6: SupraHex: visualise DEPs and carry out gene clustering/sample correlation
#----------------------------------------------------------------------------------
library(supraHex)
# 1) generate train data :  row by deg and col by samples
limma_all_sig <- rbind(do.call(rbind,limma_ls$orthotopic),do.call(rbind,limma_ls$subcutaneous)) %>% 
                      filter(group != "not sig") %>%  mutate(GS=paste0(Source,".",tag,".",group))
sig_proteins <- limma_all_sig %>% pull(Gene) %>% unique() # 3213 prteins
data <- exp[sig_proteins,]
#          PRO_ortho_G_1 PRO_ortho_G_2 PRO_ortho_GA_1 PRO_ortho_GA_2 PRO_ortho_GA_3
# Oxct1       0.04859454   0.016216569     0.07245741   -0.004515639    0.004271701
# Ablim2      0.04859454   0.016216569     0.07245741   -0.004515639    0.004271701
# Acsl3      -4.01607372  -5.029933770    -4.00352107   -3.013857173   -2.208439918
# Hscb       -6.47579459  -4.608996022    -4.50546735   -5.661775774   -3.320985842
# Myh10       0.21606877   0.008129042     0.69787829    0.762238118    1.227550338
# Naaladl2   -3.66672820  -3.855040716    -2.46692787   -0.004515639    0.004271701
# 2) get trained using by default setup
sMap <- sPipeline(data=data)
pdf("./results/chapter2_PRO/mouse/9.superHex.pdf", width = 6, height = 12)
visHexMulComp(sMap,  colormap="royalblue3-white-red2", newpage = F,rect.grid=c(6,5), zlim=c(-2,2),title.rotate = 15)
dev.off()
```


```{r,  echo=FALSE , out.width = "600px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/9.superHex.png")
```

```{r,eval=FALSE}
#----------------------------------------------------------------------------------
#  Step 7: GSEA analysis PIONE subnetwork gene sets
#----------------------------------------------------------------------------------
library(clusterProfiler)
library(enrichplot)
# pione subnetwork 
subnet <- read.xlsx("./data/databases/3.PIONE_subg_nodes.xlsx") # 52 genes
pione_term <- data.frame(term="PIONE_subnet",gene=subnet$name) %>% mutate(gene=str_to_title(gene)) ## human gene -> mouse gene
## GSEA
# (1) ortho
gsea_pione_ortho_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
    data <-  limma_ortho_ls[[myCompare[x]]] 
    foldChange <- data$logFC 
    names(foldChange) <- data$Gene
    foldChange <- foldChange[order(foldChange, decreasing = T)]
    edo.gsea <- GSEA(foldChange, TERM2GENE = pione_term, 
                     pvalueCutoff = 1, nPerm = 1000)
    edo.gsea@result$Description <- tolower(edo.gsea@result$Description)
    color.set <- c("#5e4542","#b22613")
    p <- gseaplot2(edo.gsea, geneSetID="PIONE_subnet",
               rel_heights = c(0.8,0.2), pvalue_table = T, base_size = 16, 
               subplots=c(1,2), color = color.set,
               title =paste0 ("[orthotopic] Protein comparison : ",myCompare[x])) })
names(gsea_pione_ortho_ls) <- myCompare
saveRDS(gsea_pione_ortho_ls,"./results/chapter2_PRO/mouse/10.[orthotopic]_gsea_pione.rds")
# output
pdf("./results/chapter2_PRO/mouse/10.[orthotopic]_gsea_pione.pdf",width = 10,height = 5)
gsea_pione_ortho_ls
dev.off()

# (2) sub
gsea_pione_sub_ls <- pbapply::pblapply(1:length(myCompare),FUN=function(x){
    data <-  limma_sub_ls[[myCompare[x]]] 
    foldChange <- data$logFC 
    names(foldChange) <- data$Gene
    foldChange <- foldChange[order(foldChange, decreasing = T)]
    edo.gsea <- GSEA(foldChange, TERM2GENE = pione_term, 
                     pvalueCutoff = 1, nPerm = 1000)
    edo.gsea@result$Description <- tolower(edo.gsea@result$Description)
    color.set <- c("#5e4542","#b22613")
    p2 <- gseaplot2(edo.gsea, geneSetID="PIONE_subnet",
               rel_heights = c(0.8,0.2), pvalue_table = T, base_size = 16, 
               subplots=c(1,2), color = color.set,
               title =paste0 ("[subcutaneous] Protein comparison : ",myCompare[x]))  })
names(gsea_pione_sub_ls) <- myCompare
saveRDS(gsea_pione_sub_ls,"./results/chapter2_PRO/mouse/10.[subcutaneous]_gsea_pione.rds")
# output
pdf("./results/chapter2_PRO/mouse/10.[subcutaneous]_gsea_pione.pdf",width = 10,height = 5)
gsea_pione_sub_ls
dev.off()
```

```{r,  echo=FALSE , out.width = "600px" , fig.align = 'center',  fig.cap = '' }
library(knitr)
knitr::include_graphics("./results/chapter2_PRO/mouse/10.[subcutaneous]_gsea_pione.png")
```
